//
// prosystem-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 5/30/24
// https://buildsettingextractor.com
//

// Allow Multi-Platform Builds
// 
// If enabled, allows targets to build multiple times within a single build operation.
// Targets will build for the platform of the active run destination, as well as the
// platforms of any targets which depend on them.

ALLOW_TARGET_PLATFORM_SPECIALIZATION = YES



// Always Search User Paths (Deprecated)
// 
// This setting is deprecated as of Xcode 8.3 and may not be supported in future
// versions. It is recommended that you disable the setting.
// 
// If enabled, both `#include <header.h>`-style and `#include "header.h"`-style
// directives search the paths in `USER_HEADER_SEARCH_PATHS` before
// `HEADER_SEARCH_PATHS`. As a consequence, user headers, such as your own `String.h`
// header, have precedence over system headers when using `#include <header.h>`. This is
// done using the `-iquote` flag for the paths provided in `USER_HEADER_SEARCH_PATHS`. If
// disabled and your compiler fully supports separate user paths, user headers are only
// accessible with `#include "header.h"`-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO



// Misuse of 'nonnull'
// 
// Check for misuses of `nonnull` parameter and return types.

CLANG_ANALYZER_NONNULL = YES



// Suspicious Conversions of NSNumber and CFNumberRef
// 
// Warn when a number object, such as an instance of `NSNumber`, `CFNumberRef`,
// `OSNumber`, or `OSBoolean` is compared or converted to a primitive value instead of
// another object.

CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE



// C++ Language Dialect
// 
// Choose a standard or non-standard C++ language dialect. Options include:
// 
// * C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// * GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// * C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// * GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// * C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// * GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// * C++17: Accept the ISO C++ 2017 standard with amendments, but not GNU extensions.
// [-std=c++17]
// * GNU++17: Accept the ISO C++ 2017 standard with amendments and GNU extensions.
// [-std=gnu++17]
// * Compiler Default: Tells the compiler to use its default C++ language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)

CLANG_CXX_LANGUAGE_STANDARD = gnu++0x



CLANG_CXX_LIBRARY = libc++



// Weak References in Manual Retain Release
// 
// Compiles Objective-C code to enable weak references for code compiled with manual
// retain release (MRR) semantics.

CLANG_ENABLE_OBJC_WEAK = YES



// Direct usage of 'isa'
// 
// Warn about direct accesses to the Objective-C `isa` pointer instead of using a runtime
// API.

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR



// Documentation Comments
// 
// Warns about issues in documentation comments (`doxygen`-style) such as missing or
// incorrect documentation tags.

CLANG_WARN_DOCUMENTATION_COMMENTS = YES



// Unintentional Root Class
// 
// Warn about classes that unintentionally do not subclass a root class, such as
// `NSObject`.

CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR



// Unguarded availability
// 
// Warn if an API that is newer than the deployment target is used without "if
// (@available(...))" guards.

CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE



// Code Signing Style
// 
// This setting specifies the method used to acquire and locate signing assets. Choose
// `Automatic` to let Xcode automatically create and update profiles, app IDs, and
// certificates. Choose `Manual` to create and update these yourself on the developer
// website.

CODE_SIGN_STYLE = Automatic



// Strip Debug Symbols During Copy
// 
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be strippedâ€”use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = NO



// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `\_\_asm\_\_`, `\_\_inline\_\_`, and `\_\_typeof\_\_` forms), and
// the `//` syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * C17: Accept ISO C17 (2018), but not GNU extensions. [-std=c17]
// * GNU17: Accept ISO C17 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)

GCC_C_LANGUAGE_STANDARD = gnu11



// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.

GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR



// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
// 
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.

GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE



// Enable Fast Math
// 
// Enable optimizations for floating-point arithmetic that may violate the IEEE 754
// standard and disable the high precision variant of math functions for single and half
// precision floating-point.

MTL_FAST_MATH = YES



// Other Linker Flags
// 
// Options defined in this setting are passed to invocations of the linker.

OTHER_LDFLAGS = -ObjC



// Product Name
// 
// This is the basename of the product generated by the target.
// 
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleName](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundlename)
// key in the `Info.plist` file to the value of this build setting.

PRODUCT_NAME = $(TARGET_NAME)



// Skip Install
// 
// If enabled, don't install built products even if deployment locations are active.

SKIP_INSTALL = YES



// Supported Platforms
// 
// The list of supported platforms from which a base SDK can be used. This setting is
// used if the product can be built for multiple platforms using different SDKs.

SUPPORTED_PLATFORMS = watchsimulator watchos macosx iphonesimulator iphoneos driverkit appletvsimulator appletvos



SUPPORTS_MACCATALYST = YES



// Targeted Device Families
// 
// Comma-separated list of integers corresponding to device families supported by this
// target.
// 
// The build system uses this information to set the correct value for the
// `UIDeviceFamily` key it adds to the target's `Info.plist` file. Values inapplicable to
// the current platform will be removed automatically. This also drives the
// `--target-device` flag to actool, which determines the idioms selected during catalog
// compilation.
// 
// Possible values include:
// * *1*: iPhone, iPod touch
// * *2*: iPad, Mac Catalyst using "Scaled to Match iPad" Interface
// * *3*: Apple TV
// * *4*: Apple Watch
// * *6*: Mac Catalyst using "Optimize for Mac" Interface
// * *7*: Apple Vision

TARGETED_DEVICE_FAMILY = 1,2,3,4,6