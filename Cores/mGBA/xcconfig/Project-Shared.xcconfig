//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 5/29/24
// https://buildsettingextractor.com
//

// Enable Modules (C and Objective-C)
// 
// Enables the use of modules for system APIs. System headers are imported as semantic
// modules instead of raw headers. This can result in faster builds and project indexing.

CLANG_ENABLE_MODULES = YES



// Objective-C Automatic Reference Counting
// 
// Compiles reference-counted Objective-C code to use Automatic Reference Counting. Code
// compiled using automated reference counting is compatible with other code (such as
// frameworks) compiled using either manual reference counting (for example, traditional
// `retain` and `release` messages) or automated reference counting. [-fobjc-arc]

CLANG_ENABLE_OBJC_ARC = YES



CLANG_ENABLE_OBJC_EXPERIMENTAL = YES



// Duplicate Method Definitions
// 
// Warn about declaring the same method more than once within the same `@interface`.

CLANG_WARN__DUPLICATE_METHOD_MATCH = YES



// Implicit Boolean Conversions
// 
// Warn about implicit conversions to boolean values that are suspicious. For example,
// writing `if (foo)` where `foo` is the name a function will trigger a warning.

CLANG_WARN_BOOL_CONVERSION = YES



// Implicit Constant Conversions
// 
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.

CLANG_WARN_CONSTANT_CONVERSION = YES



// Empty Loop Bodies
// 
// Warn about loop bodies that are suspiciously empty.

CLANG_WARN_EMPTY_BODY = YES



// Implicit Enum Conversions
// 
// Warn about implicit conversions between different kinds of enum values. For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.

CLANG_WARN_ENUM_CONVERSION = YES



// Implicit Integer to Pointer Conversions
// 
// Warn about implicit conversions between pointers and integers. For example, this can
// catch issues when one incorrectly intermixes using `NSNumber*`'s and raw integers.

CLANG_WARN_INT_CONVERSION = YES



// Unreachable Code
// 
// Warns about potentially unreachable code.

CLANG_WARN_UNREACHABLE_CODE = YES



// Dead Code Stripping
// 
// Activating this setting causes the `-dead_strip` flag to be passed to `ld(1)` via
// `cc(1)` to turn on dead code stripping.

DEAD_CODE_STRIPPING = YES



// Debug Information Format
// 
// The type of debug information to produce.
// 
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym



// Enable Strict Checking of objc_msgSend Calls
// 
// Controls whether `objc_msgSend` calls must be cast to the appropriate function pointer
// type before being called.

ENABLE_STRICT_OBJC_MSGSEND = YES



// Enable Testability
// 
// Enabling this setting will build the target with options appropriate for running
// automated tests against its product.
// 
// This setting can be enabled when building targets for debugging if their products will
// be tested. This may result in tests running slower than otherwise.
// 
// When this setting is enabled:
// 
// * `GCC_SYMBOLS_PRIVATE_EXTERN` is disabled (`-fvisibility=hidden` will not be passed
// to `clang`).
// * `-enable-testing` is passed to the Swift compiler.
// * `-export_dynamic` is passed to the linker.
// * `STRIP_INSTALLED_PRODUCT` is disabled (`strip` will not be run on the produced
// binary).

ENABLE_TESTABILITY = NO



// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `\_\_asm\_\_`, `\_\_inline\_\_`, and `\_\_typeof\_\_` forms), and
// the `//` syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * C17: Accept ISO C17 (2018), but not GNU extensions. [-std=c17]
// * GNU17: Accept ISO C17 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)

GCC_C_LANGUAGE_STANDARD = gnu99



// Generate Debug Symbols
// 
// Enables or disables generation of debug symbols. When debug symbols are enabled, the
// level of detail can be controlled by the `DEBUG_INFORMATION_FORMAT` setting.

GCC_GENERATE_DEBUGGING_SYMBOLS = YES



// Increase Sharing of Precompiled Headers
// 
// Enabling this option will enable increased sharing of precompiled headers among
// targets that share the same prefix header and precompiled header directory.
// 
// Xcode distinguishes between precompiled header (PCH) files by generating a hash value
// based on the command-line options to the compiler used to create the PCH. Enabling
// this option will exclude certain compiler options from that hash. Presently this
// option will exclude search path options (`-I`, `-iquote`, `-isystem`, `-F`, `-L`) from
// the hash.
// 
// Enabling increased sharing of PCH files carries some riskâ€”if two targets use the same
// prefix header but have different include paths that cause the prefix header to include
// different files when they are precompiled, then subtle problems may result because one
// target will use a PCH that was built using files included by the other target. In this
// case, this option must be turned off in order to enforce correctness.

GCC_INCREASE_PRECOMPILED_HEADER_SHARING = NO



// Symbols Hidden by Default
// 
// When enabled, all symbols are declared `private extern` unless explicitly marked to be
// exported using `\_\_attribute\_\_((visibility("default")))` in code. If not enabled,
// all symbols are exported unless explicitly marked as `private extern`. See
// [Controlling Symbol
// Visibility](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html#//apple_ref/doc/uid/TP40001670-CJBGBHEJ)
// in [C++ Runtime Environment Programming
// Guide](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/CPPRuntimeEnv.html).

GCC_SYMBOLS_PRIVATE_EXTERN = YES



// Compiler for C/C++/Objective-C
// 
// The compiler to use for C, C++, and Objective-C.

GCC_VERSION = com.apple.compilers.llvm.clang.1_0



// Implicit Conversion to 32 Bit Type
// 
// Warn if a value is implicitly converted from a 64-bit type to a 32-bit type. This is a
// subset of the warnings provided by -Wconversion.

GCC_WARN_64_TO_32_BIT_CONVERSION = YES



// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.

GCC_WARN_ABOUT_RETURN_TYPE = YES



// Undeclared Selector
// 
// Warn if a `@selector(...)` expression referring to an undeclared selector is found. A
// selector is considered undeclared if no method with that name has been declared before
// the `@selector(...)` expression, either explicitly in an `@interface` or `@protocol`
// declaration, or implicitly in an `@implementation` section. This option always
// performs its checks as soon as a `@selector(...)` expression is found, while
// `-Wselector` only performs its checks in the final stage of compilation. This also
// enforces the coding style convention that methods and selectors must be declared
// before being used.

GCC_WARN_UNDECLARED_SELECTOR = YES



// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
// 
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.

GCC_WARN_UNINITIALIZED_AUTOS = YES



// Unused Functions
// 
// Warn whenever a static function is declared but not defined or a noninline static
// function is unused.

GCC_WARN_UNUSED_FUNCTION = YES



// Unused Variables
// 
// Warn whenever a local variable or nonconstant static variable is unused aside from its
// declaration.

GCC_WARN_UNUSED_VARIABLE = YES



// Header Search Paths
// 
// This is a list of paths to folders to be searched by the compiler for included or
// imported header files when compiling C, Objective-C, C++, or Objective-C++. Paths are
// delimited by whitespace, so any paths with spaces in them need to be properly quoted.

HEADER_SEARCH_PATHS = 



// Link-Time Optimization
// 
// Enabling this setting allows optimization across file boundaries during linking.
// 
// * No: Disabled. Do not use link-time optimization.
// * Monolithic Link-Time Optimization: This mode performs monolithic link-time
// optimization of binaries, combining all executable code into a single unit and running
// aggressive compiler optimizations.
// * Incremental Link-Time Optimization: This mode performs partitioned link-time
// optimization of binaries, inlining between compilation units and running aggressive
// compiler optimizations on each unit in parallel. This enables fast incremental builds
// and uses less memory than Monolithic LTO.

LLVM_LTO = YES



// macOS Deployment Target
// 
// Code will load on this and later versions of macOS. Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for `null`
// function pointers or specific system versions before calling newer APIs.

MACOSX_DEPLOYMENT_TARGET = 10.11



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = macosx