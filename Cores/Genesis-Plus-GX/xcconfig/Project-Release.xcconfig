//
// Project-Release.xcconfig
//
// Generated by BuildSettingExtractor on 5/30/24
// https://buildsettingextractor.com
//

#include "Project-Shared.xcconfig"

// Strip Debug Symbols During Copy
// 
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be stripped—use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = YES



// Enable Foundation Assertions
// 
// Controls whether assertion logic provided by `NSAssert` is included in the
// preprocessed source code or is elided during preprocessing. Disabling assertions can
// improve code performance.

ENABLE_NS_ASSERTIONS = NO



// Optimization Level
// 
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
// 
// * None: Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independent—if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * Faster: The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * Fastest: Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * Fastest, Smallest: Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * Fastest, Aggressive Optimizations: This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]
// * Smallest, Aggressive Size Optimizations: This setting enables additional size
// savings by isolating repetitive code patterns into a compiler generated function.
// [-Oz]

GCC_OPTIMIZATION_LEVEL = s



// Preprocessor Macros
// 
// Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.

GCC_PREPROCESSOR_DEFINITIONS = $(inherited)



// Build Active Architecture Only
// 
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

ONLY_ACTIVE_ARCH = YES



// Other C Flags
// 
// Space-separated list of additional flags to pass to the compiler for C and Objective-C
// files. Be sure to backslash-escape any arguments that contain spaces or special
// characters, such as path names that may contain spaces. Use this setting if Xcode does
// not already provide UI for a particular C or Objective-C compiler flag.

OTHER_CFLAGS = -DNS_BLOCK_ASSERTIONS=1 -fPIC -DLSB_FIRST -DHAVE_ZLIB -DUSE_32BPP_RENDERING -DNDEBUG -D__LIBRETRO__ -DHAVE_OVERCLOCK -DHAVE_OPLL_CORE -DHAVE_YM3438_CORE -DINLINE="static inline" -DZ80_OVERCLOCK_SHIFT=20 -DM68K_OVERCLOCK_SHIFT=20 $(inherited)



// Validate Built Product
// 
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = YES