//
// Project-Archive.xcconfig
//
// Generated by BuildSettingExtractor on 5/30/24
// https://buildsettingextractor.com
//

#include "Project-Shared.xcconfig"

// Debug Information Format
// 
// The type of debug information to produce.
// 
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym



// Enable Foundation Assertions
// 
// Controls whether assertion logic provided by `NSAssert` is included in the
// preprocessed source code or is elided during preprocessing. Disabling assertions can
// improve code performance.

ENABLE_NS_ASSERTIONS = NO



// Preprocessor Macros
// 
// Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.

GCC_PREPROCESSOR_DEFINITIONS = RELEASE $(inherited) FRONTEND_SUPPORTS_RGB565



// Produce Debugging Information
// 
// Debugging information is required for shader debugging and profiling.

MTL_ENABLE_DEBUG_INFO = NO



// Other C Flags
// 
// Space-separated list of additional flags to pass to the compiler for C and Objective-C
// files. Be sure to backslash-escape any arguments that contain spaces or special
// characters, such as path names that may contain spaces. Use this setting if Xcode does
// not already provide UI for a particular C or Objective-C compiler flag.

OTHER_CFLAGS = $(inherited) -fno-operator-names -fno-rtti -ffast-math -ftree-vectorize -fno-strict-aliasing -frename-registers -fno-rtti -fpermissive -fno-operator-names -fsingle-precision-constant



// Validate Built Product
// 
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = YES
